//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/System/UI/PlayerControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControl : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControl"",
    ""maps"": [
        {
            ""name"": ""UI"",
            ""id"": ""99f7f8fc-4859-4991-995a-6b6139ce93ca"",
            ""actions"": [
                {
                    ""name"": ""selection"",
                    ""type"": ""Button"",
                    ""id"": ""a388bcdb-befa-45a8-85b7-7087cd098cc4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""disable"",
                    ""type"": ""Button"",
                    ""id"": ""2d984058-8fab-4732-b838-fb7af91db9dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""cameraMovement"",
                    ""type"": ""Value"",
                    ""id"": ""fcecf9db-f57c-4127-950b-38c443451ca5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""cameraRotation"",
                    ""type"": ""Value"",
                    ""id"": ""61c33e46-97ad-431b-8bab-32f4cec3385e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""cameraZoom"",
                    ""type"": ""Value"",
                    ""id"": ""3abea8db-8587-48c9-8319-fb20997cd41f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ee452652-f794-461a-8ddb-f202dc298dce"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""selection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c9e8e0e-35b7-4e1a-9e9c-df0148164064"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""disable"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""15cb9a0c-667c-4ea2-811e-f447bd77544c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""cameraMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c3865ac2-2683-4c53-9927-06f9abd4246e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""cameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""02c6bc5e-7a52-4c0e-a9a4-bd1d017c23f1"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""cameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1ca31e55-5f3f-445a-933b-c7edab7ded2d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""cameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c88617c6-4016-4ad5-bd2a-04b6cc0a3ea5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""cameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d31043b9-6a1e-4ef1-9513-143b9ce1b804"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""cameraRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d552b0a0-786e-4ec7-ad9d-fc3b6c093920"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""cameraZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_selection = m_UI.FindAction("selection", throwIfNotFound: true);
        m_UI_disable = m_UI.FindAction("disable", throwIfNotFound: true);
        m_UI_cameraMovement = m_UI.FindAction("cameraMovement", throwIfNotFound: true);
        m_UI_cameraRotation = m_UI.FindAction("cameraRotation", throwIfNotFound: true);
        m_UI_cameraZoom = m_UI.FindAction("cameraZoom", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_selection;
    private readonly InputAction m_UI_disable;
    private readonly InputAction m_UI_cameraMovement;
    private readonly InputAction m_UI_cameraRotation;
    private readonly InputAction m_UI_cameraZoom;
    public struct UIActions
    {
        private @PlayerControl m_Wrapper;
        public UIActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @selection => m_Wrapper.m_UI_selection;
        public InputAction @disable => m_Wrapper.m_UI_disable;
        public InputAction @cameraMovement => m_Wrapper.m_UI_cameraMovement;
        public InputAction @cameraRotation => m_Wrapper.m_UI_cameraRotation;
        public InputAction @cameraZoom => m_Wrapper.m_UI_cameraZoom;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @selection.started -= m_Wrapper.m_UIActionsCallbackInterface.OnSelection;
                @selection.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnSelection;
                @selection.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnSelection;
                @disable.started -= m_Wrapper.m_UIActionsCallbackInterface.OnDisable;
                @disable.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnDisable;
                @disable.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnDisable;
                @cameraMovement.started -= m_Wrapper.m_UIActionsCallbackInterface.OnCameraMovement;
                @cameraMovement.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnCameraMovement;
                @cameraMovement.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnCameraMovement;
                @cameraRotation.started -= m_Wrapper.m_UIActionsCallbackInterface.OnCameraRotation;
                @cameraRotation.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnCameraRotation;
                @cameraRotation.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnCameraRotation;
                @cameraZoom.started -= m_Wrapper.m_UIActionsCallbackInterface.OnCameraZoom;
                @cameraZoom.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnCameraZoom;
                @cameraZoom.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnCameraZoom;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @selection.started += instance.OnSelection;
                @selection.performed += instance.OnSelection;
                @selection.canceled += instance.OnSelection;
                @disable.started += instance.OnDisable;
                @disable.performed += instance.OnDisable;
                @disable.canceled += instance.OnDisable;
                @cameraMovement.started += instance.OnCameraMovement;
                @cameraMovement.performed += instance.OnCameraMovement;
                @cameraMovement.canceled += instance.OnCameraMovement;
                @cameraRotation.started += instance.OnCameraRotation;
                @cameraRotation.performed += instance.OnCameraRotation;
                @cameraRotation.canceled += instance.OnCameraRotation;
                @cameraZoom.started += instance.OnCameraZoom;
                @cameraZoom.performed += instance.OnCameraZoom;
                @cameraZoom.canceled += instance.OnCameraZoom;
            }
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IUIActions
    {
        void OnSelection(InputAction.CallbackContext context);
        void OnDisable(InputAction.CallbackContext context);
        void OnCameraMovement(InputAction.CallbackContext context);
        void OnCameraRotation(InputAction.CallbackContext context);
        void OnCameraZoom(InputAction.CallbackContext context);
    }
}
